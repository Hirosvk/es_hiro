Web server (Rails/Mongo - not relevant to setting up Elasticsearch on production, this is just not to myself):
	EC2 with Amazon AMI (ami-0e86606d): t2.micro
	ruby
		installed rvm single mode, added rvm to path
		gem install bundler (after rvm!)

	mongo
		sudo yum install mongo-org
		sudo service mongod start

	node (rails' uglifier fails without nodejs)
		curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -

	Rails config
		application.rb: Changed from Rails.group to :default, Rails.env (for some reason, :production was not loaded into Rails.group)
		Rails not loading model on production: run `bin/spring stop` to solve (I did ran a seed on development by accident, would not have been an issue had I not?)
		'string' option has been deprecated in Elasticsearch! Now only use 'text'
		Run <Model>.import with force: true option

		specify production elasticsearch server's info in


Elasticsearch server (set up 3 servers; see Note.5):
	EC2
		Amazon AMI (ami-0e86606d), t2.medium (b/c ES needes some memory capacity)
			This one has 4G memory. I tried t.micro (0.5GB memory) and it could not run Elasticsearch. I belive at least 2GB is recommended.
		security group: open both ports 9200 (for connection to web server) & 9300 (connections among nodes) to local ips.

	Elasticsearch install
		I couldn't get 'yum install' to find elasticsearch, so I installed from a tar package.
		wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.tar.gz
		wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.tar.gz.sha512
		shasum -a 512 -c elasticsearch-6.3.2.tar.gz.sha512 (should print 'ok' to confirm)
		tar -xzf elasticsearch-6.3.2.tar.gz

	Java update version
		ES needs java version higher than 1.8
		wget http://javadl.oracle.com/webapps/download/AutoDL?BundleId=234464_96a7b8442fe848ef90c96a2fad6ed6d1 (this downloads jre1xx package)
		tar -xzf <downloaded file>
		mv to /usr/lib/jvm (to live with other javas)
		sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jre1.8.0_181/bin/java 1
			(<link> <name> <path> <priority>)
		sudo update-alternatives --config java (to choose the new one)

		(this only happened when using t2.micro, not relevant if server has sufficient memory)
			check memory usage with `free -m`
			edit jvm.options to set the correct memory usage (seems that at least 2GB is recommended)

	Elasticsearch: config/elasticsearch.yml
		host: _site_ (this refers to any local ip address); or local ip of the server
		minimum_master_nodes: 2 (see Notes.5)
		Add other nodes' local ip's to discovery.zen.ping.unicast.hosts
		Left all other as defualt; played around with master eligibility settings, but seems unnecessary (left all to be master-eligible)

	System settings for Elasticsearch
		When host binding is set other than localhost, elasticsearch automatically runs on production mode. Then I encountered some new issues.
			file descriptor: error that the open file descriptor value is too low (was 1024). Required to change to at least 65536.
			Also needed to change vm.max_map_count value, it was too low for ES to run.
			Change these settings in root:
				`sudo su`
				`ulimit -a`(just to check)
				`ulimit -n 65536`
				`sysctl -w vm.max_map_count=262144`
			If I exit from root, these settings are not preserved in my user mode. Also, Elasticsearch doesn't allow to be run from root, so...
				`su <user>`
			then run elasticsearch.


Notes:
	1.  The 'yellow' status on single-node instance in production is normal; needs to create at least one replica
		(and extra node to host it) to turn it green

	2.  There is no need for Elasticsearch EC2 plugin, zen discovery (that comes out of the box) is fine.

	3.  Shard number:
		50GB of data per shard in a index is recommended (https://discuss.elastic.co/t/too-big-a-shard-vs-too-many-shards/75889).
		Default shard number is 5.

	4.  Master/Slave:
		"Elasticsearch doesn't have master/slave replication for data. See
		minimum_master_nodes for how cluster state uses it. Data is written first
		to a "primary" shard and then written to replica shards but all shard that
		write do about the same amount of work. Elasticsearch moves shards around
		the cluster on its own and decides which copy is primary all on its own.
		For the most part forcing search traffic to the replica shards isn't a
		thing you do."

	5.  I did an experiment on node numbers. (I run one node per server.)
		For 2 master-eligible nodes running in a cluster, it's recommended to set minimum_master_nodes
		to 2 to avoid 'split brain' situation. However, when I shut down one of them, the whole cluster fails.
		I'm guessing that both servers decide that they can't do their job on their own, so just give up.

		When I had 3 master-eligible nodes running with minimum_master_nodes set to 2, the cluster
		stayed reachable after shutting down one (even if it's master).

		*	miminum_master_nodes = (number of master-eligible nodes / 2 + 1)

	6.  Some thoughts on associated models i.e. Resouces - Notes / Posts - comments etc...
		On universal search on our network, what are we going to do with comment results. For example, the searched keyword
		ony exists in comments; should we show its parent post in the results? How to score the results to reflect that?

		There seem to be some options offered by Elasticsearch for cases like this; parent-join, nested, & array datatypes,
		But Elasticsearch recommends de-normalize documents for better performance, and though I haven't found a page
		saying this exactly, I'm guessing that flatter document structure also yields faster query.

		Parent-join:
		"The join field shouldnâ€™t be used like joins in a relation database. In Elasticsearch the key to good performance is to de-normalize your data into documents. Each join field, has_child or has_parent query adds a significant tax to your query performance.
		The only case where the join field makes sense is if your data contains a one-to-many relationship where one entity significantly outnumbers the other entity."

		Nested & Array Datatypes:
		As far as I understand, array query is usually inefficient. Nested datatype in Elasticsearch also treats the data in
		as array anyways, so I guess neither nested or array database provides good search performance.

		In our case, I'm thinking that we should have flat index structures of all content models. On our first iteration,
		we could implement a shallow search where we don't query nested or associated content.

	7.  routing:
		Reduces impact of searches by only targetting given shard.
		(shard_num = hash(_routing) % num_primary_shards)
		Routing does not filter. Documents with distinct routing values can end up in the same shard, and appear in the search.
		I imagine on our sites, routing value can be the :context, but filtering still needs to happen.
		I wonder if, or to what degree, routing causes documents to be unevenly distributed.

	8.  logging:
		Documentation for logging was particularly bad. I could not figure out how to change log level to examine what
		goes into Elasticsearch when documents are indexed.

	9.  Query:
		Our needs
			- multi-index, multi-fields search.
			- scored by updated_date?
			- title scores higher than body?
			- scored by social actions?

		See app/adapters/universal_text_search.rb.
		With combination of multi_match, bool, boost, and range query, I think we have solutions all our needs.

	10. Performance:
		Is cutoff frequency something we would use?

	11. One index per model:
		For the purpose of universal text search, I was wondering if we should have one index field,
		and all documents are stored under it, then when we search, it searches one index;
		or, each class has their own index, and when we search, search multiple indexes (which is supposed to be easily done in ES).

		Found a good guidance here: https://www.elastic.co/blog/index-type-parent-child-join-now-future-in-elasticsearch
		"Multiple types in the same index really shouldn't be used all that often and one of the few use cases for types is parent child relationships."
		In fact, Elasticsearch 6.0.0 or later can have only one _type per index

	12. Scoring:
		Scoring is based on Term Frequency, Inverse Document Frequency, and length of the field
		Scoring of documents is performed per shard. Not even per index. However, this shouldn't affect our case because
		searches would be performed on one shard anyways, using routing.
		
		For keyword search, filtering is done first, and scored only based on the filtered documents.
		In Term search, scoring is pre-calculated.

	13. Replica
		At index time, a replica shard does the same amount of work as the primary shard. New documents are first indexed on the primary and then on any replicas. Increasing the number of replicas does not change the capacity of the index.

		However, replica shards can serve read requests. If, as is often the case, your index is search heavy, you can increase search performance by increasing the number of replicas, but only if you also add extra hardware.

		When there are 1 replica & 3 shards, for example, primiary/replica shards might not be distributed evenly
		More about replica/shard allocation
		https://discuss.elastic.co/t/unexpected-and-uneven-per-index-shard-allocation/81221/4


	14. What if we create separate index for each context while each index consists of one (or few) shard?
	    Search across context is uncommon or non-existent
	    Routing might cause uneven distribution of documents across shards.
	    This is also suggested here https://discuss.elastic.co/t/strict-routing-only-documents-with-one-routing-key-per-shard/104360


Next steps:
	modularize index/mapping settings to remove dupicate index settings across models
	pagination
